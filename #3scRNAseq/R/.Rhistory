knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
library(flowWorkspace)
library(CytoML)
acs <- system.file("extdata/cytobank_experiment.acs", package = "CytoML")
ce <- open_cytobank_experiment(acs)
ce
sampleNames(ce)
colnames(ce)
markernames(ce)
pData(ce)
gs <- cytobank_to_gatingset(ce)
xmlfile <- ce$gatingML
fcsFiles <- list.files(ce$fcsdir, full.names = TRUE)
gs <- cytobank_to_gatingset(xmlfile, fcsFiles)
library(ggcyto)
## Plot the gates
autoplot(gs[[1]])
# Extract the population statistics
gs_pop_get_count_fast(gs, statType = "count")
knitr::opts_chunk$set()
gh_get_transformations(gs[[1]], channel = "B710-A")
head(gs_pop_get_stats(gs, xml = TRUE))
gs_pop_get_data(gs)
sampleNames(gs)
nodes <- gs_get_pop_paths(gs)
length(nodes)
plot(gs, "3+")
nodes
plot(nonodes)
plot(nodess)
plot(nodes)
rm(list=ls())
library(flowWorkspace)
load("~/R_example/gating/flowjo/DSCA_ex.Rdata.RData")
exprs
#Import flowjo workspace
ws <- open_flowjo_xml("C:/Users/rkxor/Documents/R_example/20181214/1210/10-Dec-2020_2(2019).wsp")
gs <- flowjo_to_gatingset(ws, name=1)
fs <-  gs_pop_get_data(gs)
#Do inverse transformation
trans.inv <- gh_get_transformations(gs[[1]], inverse = TRUE)
translist <- transformList(names(trans.inv), trans.inv)
fs.raw <- transform(fs, translist)
exprs <- exprs(fs.raw[[1]])
params <- parameters(fs.raw[[1]])@data
exprs <- as.data.frame(exprs)
params <- parameters(fs.raw[[1]])@data
#Convert Marker names
for(i in colnames(exprs)){
if(i %in% params[,1]){
colnames(exprs)[colnames(exprs)==i] <- params[params$name==i,2]
}
}
exprs <- exprs[,!is.na(colnames(exprs))]
colnames(exprs) <- gsub(pattern = "`", replacement ="",x=colnames(exprs))
colnames(exprs) <- gsub(pattern = "^[0-9]*", replacement ="",x=colnames(exprs))
colnames(exprs) <- gsub(pattern = "_$", replacement = "", x = colnames(exprs))
colnames(exprs) <- gsub(pattern = ".*_", replacement = "", x = colnames(exprs))
colnames(exprs) <- gsub(pattern = "-", replacement = ".", x = colnames(exprs))
colnames(exprs) <- make.unique(colnames(exprs),sep = "_")
#Add sample names
paths <- gh_get_pop_paths(gs)
paths_split <- strsplit(paths,"/")
exprs["sample"] <- rep("unassigned",nrow(exprs))
for(i in 1:length(paths_split)){
if(length(paths_split[[i]]) == 2){
print(paths[[i]])
exprs[gh_pop_get_indices(gs,paths[[i]]),"sample"] <- paths_split[[i]][2]
print(sum(gh_pop_get_indices(gs,paths[[i]])))
}
}
#Make maker names more easily readible
colnames(exprs) <- gsub(pattern = "_$", replacement = "", x = colnames(exprs))
colnames(exprs) <- gsub(pattern = ".*_", replacement = "", x = colnames(exprs))
colnames(exprs) <- gsub(pattern = "-", replacement = ".", x = colnames(exprs))
#Add cell types
exprs <- as.data.frame(exprs)
exprs["celltype"] <- rep("ungated",nrow(exprs))
exprs["node"] <- rep("ungated",nrow(exprs))
for(i in gs_get_leaf_nodes(gs)){
#i <- gsub(".*/", "", i)
cellType <- gsub(".*/", "", i)
exprs[gh_pop_get_indices(gs,i),"celltype"] <- cellType
exprs[gh_pop_get_indices(gs,i),"node"] <- i
}
exprs[,c("sample", "celltype", "node")] <- lapply(exprs[,c("sample", "celltype", "node")], as.factor)
#Normalize numeric data
library(clusterSim)
intra_markers <- c("pSTAT1", "pSTAT3", "pSTAT5", "Cas7", "p38", "IkBa",
"pERK1.2", "pS6", "Ser112")
org <- exprs %>% dplyr::select(c("Live", "Silver", intra_markers, "celltype", "sample"))
org[, -c(12,13)] <- data.Normalization(org[, -c(12,13)], type = "n1", normalization = "column")
library(CytoML)
library(flowWorkspace)
library(flowCore)
library(dplyr)
library(cytofkit)
library(stringr)
#Import flowjo workspace
ws <- open_flowjo_xml("C:/Users/rkxor/Documents/R_example/20181214/1210/10-Dec-2020_2(2019).wsp")
gs <- flowjo_to_gatingset(ws, name=1)
fs <-  gs_pop_get_data(gs)
#Do inverse transformation
trans.inv <- gh_get_transformations(gs[[1]], inverse = TRUE)
translist <- transformList(names(trans.inv), trans.inv)
fs.raw <- transform(fs, translist)
exprs <- exprs(fs.raw[[1]])
params <- parameters(fs.raw[[1]])@data
exprs <- as.data.frame(exprs)
params <- parameters(fs.raw[[1]])@data
#Convert Marker names
for(i in colnames(exprs)){
if(i %in% params[,1]){
colnames(exprs)[colnames(exprs)==i] <- params[params$name==i,2]
}
}
exprs <- exprs[,!is.na(colnames(exprs))]
colnames(exprs) <- gsub(pattern = "`", replacement ="",x=colnames(exprs))
colnames(exprs) <- gsub(pattern = "^[0-9]*", replacement ="",x=colnames(exprs))
colnames(exprs) <- gsub(pattern = "_$", replacement = "", x = colnames(exprs))
colnames(exprs) <- gsub(pattern = ".*_", replacement = "", x = colnames(exprs))
colnames(exprs) <- gsub(pattern = "-", replacement = ".", x = colnames(exprs))
colnames(exprs) <- make.unique(colnames(exprs),sep = "_")
#Add sample names
paths <- gh_get_pop_paths(gs)
paths_split <- strsplit(paths,"/")
exprs["sample"] <- rep("unassigned",nrow(exprs))
for(i in 1:length(paths_split)){
if(length(paths_split[[i]]) == 2){
print(paths[[i]])
exprs[gh_pop_get_indices(gs,paths[[i]]),"sample"] <- paths_split[[i]][2]
print(sum(gh_pop_get_indices(gs,paths[[i]])))
}
}
#Make maker names more easily readible
colnames(exprs) <- gsub(pattern = "_$", replacement = "", x = colnames(exprs))
colnames(exprs) <- gsub(pattern = ".*_", replacement = "", x = colnames(exprs))
colnames(exprs) <- gsub(pattern = "-", replacement = ".", x = colnames(exprs))
#Add cell types
exprs <- as.data.frame(exprs)
exprs["celltype"] <- rep("ungated",nrow(exprs))
exprs["node"] <- rep("ungated",nrow(exprs))
for(i in gs_get_leaf_nodes(gs)){
#i <- gsub(".*/", "", i)
cellType <- gsub(".*/", "", i)
exprs[gh_pop_get_indices(gs,i),"celltype"] <- cellType
exprs[gh_pop_get_indices(gs,i),"node"] <- i
}
exprs[,c("sample", "celltype", "node")] <- lapply(exprs[,c("sample", "celltype", "node")], as.factor)
#Normalize numeric data
library(clusterSim)
intra_markers <- c("pSTAT1", "pSTAT3", "pSTAT5", "Cas7", "p38", "IkBa",
"pERK1.2", "pS6", "Ser112")
org <- exprs %>% dplyr::select(c("Live", "Silver", intra_markers, "celltype", "sample"))
org[, -c(12,13)] <- data.Normalization(org[, -c(12,13)], type = "n1", normalization = "column")
library(caret)
input <- org %>% filter(sample!="bPEI40" & celltype=="Monocytes")
inTrain <- createDataPartition(y = input$Live, p = 0.6, list = FALSE)
train <- input[inTrain,]
test <- input[-inTrain,]
rm(inTrain,org,params,paths_split,trans.inv,translist,ws,i,paths,exprs,fs,fs.raw,gs)
library(randomForest)
mod <- randomForest(Live~ ., data = train, importance = T, proximity = T)
rm(test,input)
mod <- randomForest(Live~ ., data = train, importance = T, proximity = T)
gc()
memory.size()
memory.limit()
memory.limit(size=16000)
memory.limit()
gc()
memory.limit()
pred <- predict(mod, test)
mod <- randomForest(Live~ ., data = train, importance = T, proximity = T)
save(mod, input, train, test, cor_table, file = "Mono_WObPEI.Rdata")
View(train)
train
save(mod, train, cor_table, file = "Mono_WObPEI.Rdata")
save(mod, train, file = "Mono_WObPEI.Rdata")
library(flowWorkspace)
library(flowWorkspace)
library(CytoML)
library(flowCore)
#Import Flowjo workssace(같은 위치에 .fcs파일이 있어야 합니다.)
ws <- open_flowjo_xml("../data/concat_leukocytes.wsp")
gs <- flowjo_to_gatingset(ws, name=1)
# Inverse transformation
trans.inv <- gh_get_transformations(gs[[1]], inverse = TRUE)
translist <- transformList(names(trans.inv), trans.inv)
fs.raw <- transform(fs, translist)
fs <- gs_pop_get_data(gs)
fs.raw <- transform(fs, translist)
plot(gs)
plot(gs)
View(fs)
?plot
plot(gs,labelfontsize=10)
plot(gs,labelfontsize=40)
plot(gs,labelfontsize=40)
plot(gs,labelfontsize=100)
plot(gs,labelfontsize=100,fontsize=100)
plot(gs,labelfontsize=100,fontsize=30)
plot(gs,fontsize=30)
?gh_pop_get_indices
table(exprs[,"sample"])
#Annotate Sample names
exprs["sample"] <- rep("NA",nrow(exprs))
#Annotate Sample names
exprs["sample"] <- rep("NA",nrow(exprs))
path <- gs_get_pop_paths(gs)
nrow(exprs)
rm(list=ls())
#Import Flowjo workssace(같은 위치에 .fcs파일이 있어야 합니다.)
ws <- open_flowjo_xml("../data/concat_leukocytes.wsp")
gs <- flowjo_to_gatingset(ws, name=1)
gs <- flowjo_to_gatingset(ws, name=1)
#Get gated flow data from gatingset
fs <- gs_pop_get_data(gs)
# Inverse transformation
trans.inv <- gh_get_transformations(gs[[1]], inverse = TRUE)
translist <- transformList(names(trans.inv), trans.inv)
fs.raw <- transform(fs, translist)
# Extract expression matrix from flow data
exprs <- exprs(fs.raw[[1]])
exprs <- as.data.frame(exprs)
(params <- parameters(fs.raw[[1]])@data)
#Convert Marker names by referring to description of parameter
for(i in colnames(exprs)){
if(i %in% params[,1]){
colnames(exprs)[colnames(exprs)==i] <- params[params$name==i,2]
}
}
#Remove channles without description
exprs <- exprs[,!is.na(colnames(exprs))]
#Leave the name of target antibody only
colnames(exprs) <- gsub(pattern = "^[0-9]*", replacement ="",x=colnames(exprs))
colnames(exprs) <- gsub(pattern = "-", replacement =".",x=colnames(exprs))
colnames(exprs) <- gsub(pattern = "_$", replacement ="",x=colnames(exprs))
colnames(exprs) <- gsub(pattern = ".*_", replacement ="",x=colnames(exprs))
colnames(exprs) <- make.unique(colnames(exprs),sep = "_")
#Annotate Sample names
exprs["sample"] <- rep("NA",nrow(exprs))
path <- gs_get_pop_paths(gs)
for(i in 1:length(path)){
split_path <- strsplit(path[i],"/")
if(length(split_path[[1]])==2){
exprs[gh_pop_get_indices(gs,path[i]),"sample"] <- split_path[[1]][2]
}
}
#Annotate cell types
exprs["celltype"] <- rep("ungated",nrow(exprs))
exprs["node"] <- rep("ungated",nrow(exprs))
for(i in gs_get_leaf_nodes(gs)){
#i <- gsub(".*/", "", i)
cellType <- gsub(".*/", "", i)
exprs[gh_pop_get_indices(gs,i),"celltype"] <- cellType
exprs[gh_pop_get_indices(gs,i),"node"] <- i
}
table(exprs[,"celltype"])
table(exprs[,"sample"])
table(exprs[,"sample"],exprs[,"celltype"])
table(exprs[,"sample"],exprs[,"celltype"])
table(exprs[,"sample"],exprs[,"celltype"])
nrow(exprs)
colnames(exprs)
interest_markers <- c("NK1.1", "Gr.1", "CD11c", "Mac.1", "CD3e", "TCRb", "CD19", "B220")
interest_markers %in% colnames(exprs)
clusters_pg <- cytof_cluster(xdata = exprs[,interest], method = "Rphenograph")
library(cytofkit)
clusters_pg <- cytof_cluster(xdata = exprs[,interest], method = "Rphenograph")
clusters_pg <- cytof_cluster(xdata = exprs[,interest_markers], method = "Rphenograph")
clusters_pg
length(clusters_pg)
tbl_celltype <- table(exprs[,"celltype"])
tbl_cluster <- table(clusters_pg)
tbl_celltype
pr_mat <- re_mat <- F1_mat <- matrix(NA, nrow=length(tbl_cluster),ncol=length(tbl_celltype))
str(clusters_pg)
tbl_celltype <- table(exprs[,"celltype"])
tbl_cluster <- table(clusters_pg)
F1_mat <- matrix(NA, nrow=length(tbl_cluster),ncol=length(tbl_celltype))
for (i in 1:length(tbl_cluster)){
for (j in 1:length(tbl_celltype)){
true_positives <- sum(clusters_pg == i &
exprs[,"celltype"] == levels(exprs[,"celltype"])[j])
detected <- sum(clusters_pg == i)
truth <- sum(exprs[,"celltype"] == levels(exprs[,"celltype"])[j])
#calculate precision, recall and F1 Score
precision_ij <- true_positives / detected
recall_ij <- true_positives / truth
F1_ij <- 2 * (precision_ij * recall_ij) / (precision_ij + recall_ij)
if (F1_ij == "NaN") F1_ij <- 0
F1_mat[i, j] <- F1_ij
}
}
rownames(F1_mat) <- names(tbl_cluster)
colnames(F1_mat) <- names(tbl_celltype)
tbl_celltype <- table(exprs[,"celltype"])
tbl_cluster <- table(clusters_pg)
F1_mat <- matrix(NA, nrow=length(tbl_cluster),ncol=length(tbl_celltype))
for (i in 1:length(tbl_cluster)){
for (j in 1:length(tbl_celltype)){
true_positives <- sum(clusters_pg == i &
exprs[,"celltype"] == levels(exprs[,"celltype"])[j])
detected <- sum(clusters_pg == i)
truth <- sum(exprs[,"celltype"] == levels(exprs[,"celltype"])[j])
#calculate precision, recall and F1 Score
precision_ij <- true_positives / detected
recall_ij <- true_positives / truth
F1_ij <- 2 * (precision_ij * recall_ij) / (precision_ij + recall_ij)
if (F1_ij == "NaN") F1_ij <- 0
F1_mat[i, j] <- F1_ij
}
}
rownames(F1_mat) <- names(tbl_cluster)
colnames(F1_mat) <- names(tbl_celltype)
F1_mat
table(exprs[,"celltype"])
tbl_cluster
tbl_celltype
for (i in 1:length(tbl_cluster)){
for (j in 1:length(tbl_celltype)){
true_positives <- sum(clusters_pg == i &
exprs[,"celltype"] == levels(exprs[,"celltype"])[j])
detected <- sum(clusters_pg == i)
truth <- sum(exprs[,"celltype"] == levels(exprs[,"celltype"])[j])
#calculate precision, recall and F1 Score
precision_ij <- true_positives / detected
recall_ij <- true_positives / truth
F1_ij <- 2 * (precision_ij * recall_ij) / (precision_ij + recall_ij)
if (F1_ij == "NaN") F1_ij <- 0
F1_mat[i, j] <- F1_ij
}
}
F1_mat
sum(clusters_pg == 1 &
exprs[,"celltype"] == levels(exprs[,"celltype"])[1])
sum(clusters_pg == 1 &
exprs[,"celltype"] == levels(exprs[,"celltype"])[2])
sum(clusters_pg == 1)
sum(exprs[,"celltype"] == levels(exprs[,"celltype"])[2])
levels(exprs[,"celltype"])[2]
levels(exprs[,"celltype"])
str
str(exprs)
exprs[,c("celltype","node","sample")] <- lapply(exprs[,c("celltype","node","sample")], as.factor)
tbl_celltype <- table(exprs[,"celltype"])
tbl_cluster <- table(clusters_pg)
F1_mat <- matrix(NA, nrow=length(tbl_cluster),ncol=length(tbl_celltype))
for (i in 1:length(tbl_cluster)){
for (j in 1:length(tbl_celltype)){
true_positives <- sum(clusters_pg == i &
exprs[,"celltype"] == levels(exprs[,"celltype"])[j])
detected <- sum(clusters_pg == i)
truth <- sum(exprs[,"celltype"] == levels(exprs[,"celltype"])[j])
#calculate precision, recall and F1 Score
precision_ij <- true_positives / detected
recall_ij <- true_positives / truth
F1_ij <- 2 * (precision_ij * recall_ij) / (precision_ij + recall_ij)
if (F1_ij == "NaN") F1_ij <- 0
F1_mat[i, j] <- F1_ij
}
}
rownames(F1_mat) <- names(tbl_cluster)
colnames(F1_mat) <- names(tbl_celltype)
F1_mat
# use transpose matrix (Hungarian algorithm assumes n_rows <= n_cols)
F1_mat_trans <- t(F1_mat)
if (nrow(F1_mat_trans) <= ncol(F1_mat_trans)) {
# if fewer (or equal no.) true populations than detected clusters, can match all true populations
labels_matched <- clue::solve_LSAP(F1_mat_trans, maximum = TRUE)
# use row and column names since some labels may have been removed due to unassigned cells
labels_matched <- as.numeric(colnames(F1_mat_trans)[as.numeric(labels_matched)])
names(labels_matched) <- rownames(F1_mat_trans)
} else {
# if fewer detected clusters than true populations, use transpose matrix and assign
# NAs for true populations without any matching clusters
labels_matched_flipped <- clue::solve_LSAP(F1_mat, maximum = TRUE)
# use row and column names since some labels may have been removed due to unassigned cells
labels_matched_flipped <- as.numeric(rownames(F1_mat_trans)[as.numeric(labels_matched_flipped)])
names(labels_matched_flipped) <- rownames(F1_mat)
labels_matched <- rep(NA, ncol(F1_mat))
names(labels_matched) <- rownames(F1_mat_trans)
labels_matched[as.character(labels_matched_flipped)] <- as.numeric(names(labels_matched_flipped))
}
pr <- re <- F1 <- n_cells_matched <- rep(NA, ncol(F1_mat))
names(pr) <- names(re) <- names(F1) <- names(n_cells_matched) <- names(labels_matched)
for (i in 1:ncol(F1_mat)) {
# set to 0 if no matching cluster (too few detected clusters); use character names
# for row and column indices in case subsampling completely removes some clusters
F1[i] <- ifelse(is.na(labels_matched[i]), 0, F1_mat[as.character(labels_matched[i]), names(labels_matched)[i]])
n_cells_matched[i] <- sum(clusters_pg == labels_matched[i], na.rm = TRUE)
}
# means across populations
mean_F1 <- mean(F1)
lalabels_matched
labels_matched
mean_F1
# use transpose matrix (Hungarian algorithm assumes n_rows <= n_cols)
F1_mat_trans <- t(F1_mat)
if (nrow(F1_mat_trans) <= ncol(F1_mat_trans)) {
# if fewer (or equal no.) true populations than detected clusters, can match all true populations
labels_matched <- clue::solve_LSAP(F1_mat_trans, maximum = TRUE)
# use row and column names since some labels may have been removed due to unassigned cells
labels_matched <- as.numeric(colnames(F1_mat_trans)[as.numeric(labels_matched)])
names(labels_matched) <- rownames(F1_mat_trans)
} else {
# if fewer detected clusters than true populations, use transpose matrix and assign
# NAs for true populations without any matching clusters
labels_matched_flipped <- clue::solve_LSAP(F1_mat, maximum = TRUE)
# use row and column names since some labels may have been removed due to unassigned cells
labels_matched_flipped <- as.numeric(rownames(F1_mat_trans)[as.numeric(labels_matched_flipped)])
names(labels_matched_flipped) <- rownames(F1_mat)
labels_matched <- rep(NA, ncol(F1_mat))
names(labels_matched) <- rownames(F1_mat_trans)
labels_matched[as.character(labels_matched_flipped)] <- as.numeric(names(labels_matched_flipped))
}
labels_matched
labels_matched <- clue::solve_LSAP(F1_mat_trans, maximum = TRUE)
labels_mat
labels_matched
as.numeric(labels_matched)
colnames(F1_mat_trans)
colnames(F1_mat_trans)[as.numeric(labels_matched)]
colnames(F1_mat_trans)[as.numeric(labels_matched)]
colnames(F1_mat_trans)[as.numeric(labels_matched)]
as.numeric(colnames(F1_mat_trans)[as.numeric(labels_matched)])
rownames(F1_mat_trans)
labels_matched_flipped <- clue::solve_LSAP(F1_mat, maximum = TRUE)
# use transpose matrix (Hungarian algorithm assumes n_rows <= n_cols)
F1_mat_trans <- t(F1_mat)
# if fewer detected clusters than true populations, use transpose matrix and assign
# NAs for true populations without any matching clusters
labels_matched_flipped <- clue::solve_LSAP(F1_mat, maximum = TRUE)
labels_matched <- rep(NA, nrow(F1_mat))
for(i in 1:nrow(F1_mat)){
labels_matched[i] <- names(which.max(F1_mat[i,]))
}
exprs[,"celltype_nto1"] <- labels_matched[clusters_pg]
table(exprs[,"celltype_nto1"])
for (i in 1:nrow(exprs)){
exprs[i,"celltype_1to1"] <- ifelse(clusters_pg[i] %in% labels_matched, names(which(labels_matched==clusters_pg[i])), "unassigned")
}
for (i in 1:nrow(exprs)){
exprs[i,"celltype_1to1"] <- ifelse(clusters_pg[i] %in% labels_matched, names(which(labels_matched==clusters_pg[i])), "unassigned")
}
# use transpose matrix (Hungarian algorithm assumes n_rows <= n_cols)
F1_mat_trans <- t(F1_mat)
if (nrow(F1_mat_trans) <= ncol(F1_mat_trans)) {
# if fewer (or equal no.) true populations than detected clusters, can match all true populations
labels_matched <- clue::solve_LSAP(F1_mat_trans, maximum = TRUE)
# use row and column names since some labels may have been removed due to unassigned cells
labels_matched <- as.numeric(colnames(F1_mat_trans)[as.numeric(labels_matched)])
names(labels_matched) <- rownames(F1_mat_trans)
} else {
# if fewer detected clusters than true populations, use transpose matrix and assign
# NAs for true populations without any matching clusters
labels_matched_flipped <- clue::solve_LSAP(F1_mat, maximum = TRUE)
# use row and column names since some labels may have been removed due to unassigned cells
labels_matched_flipped <- as.numeric(rownames(F1_mat_trans)[as.numeric(labels_matched_flipped)])
names(labels_matched_flipped) <- rownames(F1_mat)
labels_matched <- rep(NA, ncol(F1_mat))
names(labels_matched) <- rownames(F1_mat_trans)
labels_matched[as.character(labels_matched_flipped)] <- as.numeric(names(labels_matched_flipped))
}
labels_matched
for (i in 1:nrow(exprs)){
exprs[i,"celltype_1to1"] <- ifelse(clusters_pg[i] %in% labels_matched, names(which(labels_matched==clusters_pg[i])), "unassigned")
}
pop <- rep(NA, nrow(exprs))
for (i in 1:nrow(exprs)){
pop[i] <- ifelse(clusters_pg[i] %in% labels_matched, names(which(labels_matched==clusters_pg[i])), "unassigned")
}
pop
exprs[,"celltype_1to1"] <- pop
table(exprs[,"celltype_1to1"])
exprs
str(exprs)
pop
table(exprs[,"celltype_1to1"])
rm(list=ls())
getwd()
setwd("R_example/analysis-pipeline/#3scRNAseq/R")
getwd()
